% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ts_forec.R
\name{ts_forec}
\alias{ts_forec}
\title{Calculate point forecasts and prediction intervals for a time series dataset}
\usage{
ts_forec(dataset, methods, level = c(80, 90), parallel = FALSE, num.cores = 2)
}
\arguments{
\item{dataset}{a list containing the time series. See details for the required format.}

\item{methods}{a list of strings with the names of the functions that calculate 
point forecasts and prediction intervals for time series.}

\item{level}{the confidence levels for prediction intervals, such as 80, 90.}

\item{parallel}{logical. If \code{TRUE} then the calculations are conducted in parallel.}

\item{num.cores}{the specified amount of parallel processes to be used if parallel = TRUE.}
}
\value{
A list with the elements having the following structure
\describe{
  \item{x}{a time series object \code{ts} with the historical data.}
  \item{h}{the amount of future time steps to forecast.}
  \item{f}{a matrix with \code{F} rows and \code{n} columns. Each row contains
  the fitted values of each method in \code{methods}.}
  \item{ff}{a matrix with \code{F} rows and \code{h} columns. Each row contains
  the forecasts of each method in \code{methods}.}
  \item{lower}{a list with each element being the matrix of lower bounds 
  for certain confidence level.}
  \item{upper}{a list with each element being the matrix of upper bounds 
  for certain confidence level.}
}
}
\description{
Point forecasts and prediction intervals of all forecasting methods 
in \code{methods} are calculated for each time series in \code{dataset}.
}
\details{
\code{dataset} must be a list with each element having the following format:
\describe{
  \item{x}{a time series object \code{ts} with the historical data.}
  \item{h}{the amount of future time steps to forecast.}
}
\code{methods} a list of strings with the names of the functions 
that calculate point forecasts and prediction intervals for time series. 
The functions must exist and take as parameters (\code{x}, \code{h}, \code{level}), where
\code{x} is the \code{ts} object with the input series, 
\code{h} is the amount of future time steps to forecast 
and \code{level} denotes confidence levels for prediction intervals. 
The output of these functions must be
a list with \code{forecs}(point forecasts), \code{fitted}(fitted values), 
\code{pil}(lower bounds of prediction intervals) and 
\code{piu}(upper bounds of prediction intervals)
}
\examples{
auto_arima_fun <- function(x, h, level) {
  model <- forecast::auto.arima(x, stepwise=FALSE, approximation=FALSE)
  forecs <- forecast::forecast(model, h=h)$mean
  fitted <- forecast::forecast(model, h=h)$fitted
  pil <- forecast::forecast(model, h=h, level=level)$lower
  piu <- forecast::forecast(model, h=h, level=level)$upper
  list(forecs=forecs, fitted=fitted, pil=pil, piu=piu)
}
ets_fun <- function(x, h, level) {
  # for ets method, residuals != x - fitted
  model <- forecast::ets(x)
  forecs <- forecast::forecast(model, h=h)$mean
  fitted <- forecast::forecast(model, h=h)$fitted
  pil <- forecast::forecast(model, h=h, level=level)$lower
  piu <- forecast::forecast(model, h=h, level=level)$upper
  list(forecs=forecs, fitted=fitted, pil=pil, piu=piu)
}
tbats_fun <- function(x, h, level) {
  # for tbats method, residuals != mean - fitted
  model <- forecast::tbats(x, use.parallel=FALSE)
  forecs <- forecast::forecast(model, h=h)$mean
  fitted <- forecast::forecast(model, h=h)$fitted
  pil <- forecast::forecast(model, h=h, level=level)$lower
  piu <- forecast::forecast(model, h=h, level=level)$upper
  list(forecs=forecs, fitted=fitted, pil=pil, piu=piu)
}
create_example_list <- function() {
  methods_list <- list("auto_arima_fun")
  methods_list <- append(methods_list, "ets_fun")
  methods_list <- append(methods_list, "tbats_fun")
  methods_list
}
methods <- create_example_list()
forec_results <- ts_forec(Mcomp::M3[1:5], methods, level = c(80, 90))

}
\references{
Montero-Manso et al. (2018).
}
